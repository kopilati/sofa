version: '3'

vars:
  CLUSTER_NAME: sofa-test
  IMAGE_NAME: sofa:latest
  AUDIT_IMAGE_NAME: audit-service:latest
  HSM_IMAGE_NAME: hsm-simulator:latest
  NAMESPACE: default
  SOFA_PORT: 30081
  KEYCLOAK_PORT: 30082
  AUDIT_PORT: 30083
  HSM_PORT: 30084
  ENVIRONMENT: dev # default environment
  SOFA_URL: http://localhost:{{.SOFA_PORT}}

tasks:
  # Build tasks
  build-sofa:
    desc: Build the Sofa Docker image (with HSM simulator by default)
    cmds:
    - echo "Building Sofa Docker image with HSM simulator..."
    - docker build -t {{.IMAGE_NAME}} ./sofa

  build-azure:
    desc: Build the Sofa Docker image with Azure HSM support
    cmds:
    - echo "Building Sofa Docker image with Azure HSM support..."
    - docker build -t sofa-azure:latest -f ./sofa/Dockerfile.azure ./sofa

  build-audit:
    desc: Build the Audit Service Docker image
    cmds:
    - echo "Building Audit Service Docker image..."
    - docker build -t {{.AUDIT_IMAGE_NAME}} ./audit-service

  build-hsm:
    desc: Build the HSM Simulator Docker image
    cmds:
    - echo "Building HSM Simulator Docker image..."
    - docker build -t {{.HSM_IMAGE_NAME}} ./hsm-simulator

  # Generic build task that builds all services
  build:
    desc: Build all Docker images (Sofa, Audit, HSM)
    deps: [ build-sofa, build-audit, build-hsm ]
    cmds:
    - echo "All services built successfully"

  # Rollout tasks
  rollout-sofa:
    desc: Build Sofa, load the image into Kind, and rollout the deployment
    cmds:
    - echo "Building and rolling out Sofa..."
    - task: build-sofa
    - kind load docker-image {{.IMAGE_NAME}} --name {{.CLUSTER_NAME}}
    - kubectl rollout restart deployment/{{.ENVIRONMENT}}-sofa
    - kubectl wait --for=condition=available deployment/{{.ENVIRONMENT}}-sofa --timeout=60s
    - echo "Sofa has been rebuilt and deployed"

  rollout-audit:
    desc: Build Audit Service, load the image into Kind, and rollout the deployment
    cmds:
    - echo "Building and rolling out Audit Service..."
    - task: build-audit
    - kind load docker-image {{.AUDIT_IMAGE_NAME}} --name {{.CLUSTER_NAME}}
    - kubectl apply -f ./audit-service/k8s/audit-service.yaml
    - kubectl wait --for=condition=available deployment/{{.ENVIRONMENT}}-audit-service --timeout=60s
    - echo "Audit Service has been rebuilt and deployed"

  rollout-hsm:
    desc: Build HSM Simulator, load the image into Kind, and rollout the deployment
    cmds:
    - echo "Building and rolling out HSM Simulator..."
    - task: build-hsm
    - kind load docker-image {{.HSM_IMAGE_NAME}} --name {{.CLUSTER_NAME}}
    - kubectl rollout restart deployment/{{.ENVIRONMENT}}-hsm-simulator
    - kubectl wait --for=condition=available deployment/{{.ENVIRONMENT}}-hsm-simulator --timeout=60s
    - echo "HSM Simulator has been rebuilt and deployed"

  rollout-azure:
    desc: Build Sofa with Azure HSM support, load the image into Kind, and rollout the deployment
    cmds:
    - echo "Building and rolling out Sofa with Azure HSM..."
    - task: build-azure
    - kind load docker-image sofa-azure:latest --name {{.CLUSTER_NAME}}
    - |
      echo "Updating deployment to use Azure HSM image..."
      kubectl set image deployment/{{.ENVIRONMENT}}-sofa sofa=sofa-azure:latest
    - kubectl rollout restart deployment/{{.ENVIRONMENT}}-sofa
    - kubectl wait --for=condition=available deployment/{{.ENVIRONMENT}}-sofa --timeout=60s
    - echo "Sofa has been rebuilt with Azure HSM support and deployed"

  # Generic rollout task that rolls out all services
  rollout:
    desc: Build and rollout all services (Sofa, Audit, HSM)
    deps: [ rollout-sofa, rollout-audit, rollout-hsm ]
    cmds:
    - echo "All services have been rolled out"

  # Port forwarding tasks
  port-forward-audit:
    desc: Set up port forwarding for Audit Service only
    cmds:
    - |
      echo "Setting up port forwarding for Audit Service..."
      echo "Audit Service will be available at: http://localhost:{{.AUDIT_PORT}}"
      echo ""
      echo "Press Ctrl+C to stop port forwarding"
      kubectl port-forward svc/{{.ENVIRONMENT}}-audit-service {{.AUDIT_PORT}}:80

  port-forward-hsm:
    desc: Set up port forwarding for HSM Simulator only
    cmds:
    - |
      echo "Setting up port forwarding for HSM Simulator..."
      echo "HSM Simulator will be available at: http://localhost:{{.HSM_PORT}}"
      echo ""
      echo "Press Ctrl+C to stop port forwarding"
      kubectl port-forward svc/{{.ENVIRONMENT}}-hsm-simulator {{.HSM_PORT}}:8080

  port-forward-sofa:
    desc: Set up port forwarding for Sofa only
    cmds:
    - |
      echo "Setting up port forwarding for Sofa..."
      echo "Sofa will be available at: http://localhost:{{.SOFA_PORT}}"
      echo ""
      echo "Press Ctrl+C to stop port forwarding"
      kubectl port-forward svc/{{.ENVIRONMENT}}-sofa-service {{.SOFA_PORT}}:80

  port-forward-keycloak:
    desc: Set up port forwarding for Keycloak only
    cmds:
    - |
      echo "Setting up port forwarding for Keycloak..."
      echo "Keycloak will be available at: http://localhost:{{.KEYCLOAK_PORT}}"
      echo "Keycloak admin console: http://localhost:{{.KEYCLOAK_PORT}}/admin (admin/admin)"
      echo ""
      echo "Press Ctrl+C to stop port forwarding"
      kubectl port-forward svc/{{.ENVIRONMENT}}-keycloak-service {{.KEYCLOAK_PORT}}:8080

  get-token:
    desc: Get an access token from Keycloak using sofa-client credentials
    cmds:
    - |
      # Define variables
      CLIENT_ID="sofa-client"
      CLIENT_SECRET="sofa-client-secret"
      TOKEN_ENDPOINT="http://localhost:{{.KEYCLOAK_PORT}}/realms/sofa/protocol/openid-connect/token"

      # Make token request using client credentials grant
      TOKEN_RESPONSE=$(curl -s -X POST \
        "$TOKEN_ENDPOINT" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "grant_type=client_credentials&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET")

      # Check if we got a valid response
      if echo "$TOKEN_RESPONSE" | grep -q "access_token"; then
        # Extract and display the token
        echo "$TOKEN_RESPONSE" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4
        
      else
        echo "❌ Failed to obtain access token"
        echo "Error response: $TOKEN_RESPONSE"
        exit 1
      fi

  create-database:
    desc: Create a database in CouchDB through the Sofa proxy
    cmds:
    - |
      # Check if a database name was provided
      if [ -z "{{.CLI_ARGS}}" ]; then
        echo "❌ Error: Database name is required"
        echo "Usage: task create-database -- <database_name>"
        exit 1
      fi

      DB_NAME="{{.CLI_ARGS}}"
      echo "Creating database '$DB_NAME' through Sofa..."

      ACCESS_TOKEN=$(task get-token)
      # Create the database
      echo "Creating database..."
      RESPONSE=$(curl -s -X PUT \
        "http://localhost:{{.SOFA_PORT}}/$DB_NAME" \
        -H "Authorization: Bearer $ACCESS_TOKEN" \
        -w "\n%{http_code}")

      # Extract HTTP status code and response body
      STATUS_CODE=$(echo "$RESPONSE" | tail -n1)
      BODY=$(echo "$RESPONSE" | sed '$d')

      # Check response status
      if [ "$STATUS_CODE" = "201" ]; then
        echo "✅ Database '$DB_NAME' created successfully"
      elif [ "$STATUS_CODE" = "412" ]; then
        echo "ℹ️ Database '$DB_NAME' already exists"
      else
        echo "❌ Failed to create database"
        echo "Status code: $STATUS_CODE"
        echo "Response: $BODY"
        exit 1
      fi

  insert-document:
    desc: Insert a document into a CouchDB database through the Sofa proxy
    silent: true
    cmds:
    - |
      # Parse arguments
      args=({{.CLI_ARGS}})
      if [ ${#args[@]} -lt 2 ]; then
        echo "❌ Error: Both database name and document data are required"
        echo "Usage: task insert-document -- <database_name> <json_file_or_string>"
        echo "Examples:"
        echo "  task insert-document -- mydb '{\"name\":\"John\",\"age\":30}'"
        echo "  task insert-document -- mydb ./document.json"
        exit 1
      fi

      DB_NAME=${args[0]}
      DOC_SOURCE=${args[@]:1}

      # Determine if the second argument is a file or a JSON string
      JSON_DATA=""
      if [[ -f "$DOC_SOURCE" ]]; then
        echo "Reading JSON from file: $DOC_SOURCE"
        JSON_DATA=$(cat "$DOC_SOURCE")
      else
        echo "Using provided JSON string"
        JSON_DATA="$DOC_SOURCE"
      fi
      ACCESS_TOKEN=$(task get-token)
      # Validate JSON
      echo "$JSON_DATA" | jq . > /dev/null 2>&1
      if [ $? -ne 0 ]; then
        echo "❌ Error: Invalid JSON data"
        echo "Please provide valid JSON or a path to a valid JSON file"
        exit 1
      fi

      echo "Inserting document into database '$DB_NAME'..."

      # Insert the document
      echo "Inserting document... '$ACCESS_TOKEN'"
      RESPONSE=$(curl -s -X POST \
        "http://localhost:{{.SOFA_PORT}}/$DB_NAME" \
        -H "Authorization: Bearer $ACCESS_TOKEN" \
        -H "Content-Type: application/json" \
        -d "$JSON_DATA" \
        -w "\n%{http_code}")

      # Extract HTTP status code and response body
      STATUS_CODE=$(echo "$RESPONSE" | tail -n1)
      BODY=$(echo "$RESPONSE" | sed '$d')

      # Check response status
      if [ "$STATUS_CODE" = "201" ]; then
        # Extract document ID and rev from response
        DOC_ID=$(echo "$BODY" | jq -r '.id')
        DOC_REV=$(echo "$BODY" | jq -r '.rev')
        
        echo "✅ Document inserted successfully"
        echo "Document ID: $DOC_ID"
        echo "Revision: $DOC_REV"
      else
        echo "❌ Failed to insert document"
        echo "Status code: $STATUS_CODE"
        echo "Response: $BODY"
        exit 1
      fi

  # Main port-forward setups that combine multiple services
  port-forward:
    desc: Set up port forwarding for both Sofa and Keycloak
    cmds:
    - |
      echo "Setting up port forwarding for Sofa and Keycloak..."
      echo "Sofa will be available at: http://localhost:{{.SOFA_PORT}}"
      echo "Keycloak will be available at: http://localhost:{{.KEYCLOAK_PORT}}"
      echo "Keycloak admin console: http://localhost:{{.KEYCLOAK_PORT}}/admin (admin/admin)"
      echo ""
      echo "Press Ctrl+C to stop port forwarding"
      echo ""

      # Start port forwards in background
      kubectl port-forward svc/{{.ENVIRONMENT}}-sofa-service {{.SOFA_PORT}}:80 & 
      SOFA_PF_PID=$!

      kubectl port-forward svc/{{.ENVIRONMENT}}-keycloak-service {{.KEYCLOAK_PORT}}:8080 &
      KC_PF_PID=$!

      # Set up trap to kill background processes on exit
      trap "kill $SOFA_PF_PID $KC_PF_PID" EXIT INT TERM

      # Keep script running
      echo "Port forwarding active. Press Ctrl+C to exit."
      tail -f /dev/null

  port-forward-all:
    desc: Set up port forwarding for Sofa, Keycloak, Audit Service, and HSM Simulator
    cmds:
    - |
      echo "Setting up port forwarding for Sofa, Keycloak, Audit Service, and HSM Simulator..."
      echo "Sofa will be available at: http://localhost:{{.SOFA_PORT}}"
      echo "Keycloak will be available at: http://localhost:{{.KEYCLOAK_PORT}}"
      echo "Audit Service will be available at: http://localhost:{{.AUDIT_PORT}}"
      echo "HSM Simulator will be available at: http://localhost:{{.HSM_PORT}}"
      echo "Keycloak admin console: http://localhost:{{.KEYCLOAK_PORT}}/admin (admin/admin)"
      echo ""
      echo "Press Ctrl+C to stop port forwarding"
      echo ""

      # Start port forwards in background
      kubectl port-forward svc/{{.ENVIRONMENT}}-sofa-service {{.SOFA_PORT}}:80 & 
      SOFA_PF_PID=$!

      kubectl port-forward svc/{{.ENVIRONMENT}}-keycloak-service {{.KEYCLOAK_PORT}}:8080 &
      KC_PF_PID=$!

      kubectl port-forward svc/{{.ENVIRONMENT}}-audit-service {{.AUDIT_PORT}}:80 &
      AUDIT_PF_PID=$!

      kubectl port-forward svc/{{.ENVIRONMENT}}-hsm-simulator {{.HSM_PORT}}:8080 &
      HSM_PF_PID=$!

      # Set up trap to kill background processes on exit
      trap "kill $SOFA_PF_PID $KC_PF_PID $AUDIT_PF_PID $HSM_PF_PID" EXIT INT TERM

      # Keep script running
      echo "Port forwarding active. Press Ctrl+C to exit."
      tail -f /dev/null

  # Cluster and image management tasks
  create-cluster:
    desc: Create a Kind cluster if it doesn't exist
    cmds:
    - |
      if ! kind get clusters | grep -q {{.CLUSTER_NAME}}; then
        echo "Creating Kind cluster..."
        kind create cluster --name {{.CLUSTER_NAME}} --config kind-config.yaml
      else
        echo "Kind cluster already exists, skipping creation."
      fi

  load-image-sofa:
    desc: Load the Sofa image into the Kind cluster
    deps: [ build-sofa, create-cluster ]
    cmds:
    - echo "Loading Sofa image into Kind cluster..."
    - kind load docker-image {{.IMAGE_NAME}} --name {{.CLUSTER_NAME}}

  load-image-audit:
    desc: Load the Audit Service image into the Kind cluster
    deps: [ build-audit, create-cluster ]
    cmds:
    - echo "Loading Audit Service image into Kind cluster..."
    - kind load docker-image {{.AUDIT_IMAGE_NAME}} --name {{.CLUSTER_NAME}}

  load-image-hsm:
    desc: Load the HSM Simulator image into the Kind cluster
    deps: [ build-hsm, create-cluster ]
    cmds:
    - echo "Loading HSM Simulator image into Kind cluster..."
    - kind load docker-image {{.HSM_IMAGE_NAME}} --name {{.CLUSTER_NAME}}

  # Generic task to load all images
  load-image:
    desc: Load all images into the Kind cluster
    deps: [ load-image-sofa, load-image-audit, load-image-hsm ]
    cmds:
    - echo "All images loaded into the cluster"

  apply-manifests:
    desc: Apply all Kubernetes manifests using Kustomize
    deps: [ load-image ]
    cmds:
    - echo "Applying Kubernetes resources using Kustomize for {{.ENVIRONMENT}} environment..."
    - kubectl apply -k k8s/overlays/{{.ENVIRONMENT}}
    - |
      echo "Waiting for services to be ready..."
      kubectl wait --for=condition=available deployment/{{.ENVIRONMENT}}-couchdb --timeout=90s || true
      kubectl wait --for=condition=available deployment/{{.ENVIRONMENT}}-sofa --timeout=90s || true
      kubectl wait --for=condition=available deployment/{{.ENVIRONMENT}}-keycloak --timeout=120s || true

      echo "Services are available in the cluster. Use port-forwarding to access them."
      echo "Run 'task port-forward' to access the services."

  apply-dev:
    desc: Apply the dev overlay with extra validation
    cmds:
    - |
      echo "Validating kustomize manifests before applying..."

      # Check if kustomize can build the manifests without errors
      if ! kubectl kustomize k8s/overlays/dev > /dev/null; then
        echo "❌ Error in kustomize build. Please check your manifests."
        exit 1
      fi

      echo "✅ Kustomize validation passed"

      # Apply the dev overlay
      echo "Applying dev overlay..."
      kubectl apply -k k8s/overlays/dev

      if [ $? -eq 0 ]; then
        echo "✅ Successfully applied dev overlay"
        
        echo "Waiting for HSM simulator to be ready..."
        kubectl wait --for=condition=available deployment/dev-hsm-simulator --timeout=60s || true
        
        echo "Waiting for Sofa to be ready..."
        kubectl wait --for=condition=available deployment/dev-sofa --timeout=60s || true
        
        echo "Waiting for CouchDB to be ready..."
        kubectl wait --for=condition=available deployment/dev-couchdb --timeout=90s || true
        
        echo "Waiting for Keycloak to be ready..."
        kubectl wait --for=condition=available deployment/dev-keycloak --timeout=120s || true
        
        echo "All services should now be available."
        echo "Run 'task port-forward-all' to access all services."
      else
        echo "❌ Failed to apply dev overlay"
        exit 1
      fi

  enable-audit:
    desc: Enable audit logging in SOFA by configuring it to use the audit service
    cmds:
    - |
      echo "Patching SOFA configuration to enable audit logging..."
      kubectl patch configmap {{.ENVIRONMENT}}-sofa-config -p '{"data":{"audit_enabled":"true","audit_log_service_url":"http://{{.ENVIRONMENT}}-audit-service/audit"}}'
      echo "Restarting SOFA to apply changes..."
      kubectl rollout restart deployment/{{.ENVIRONMENT}}-sofa
      kubectl wait --for=condition=available deployment/{{.ENVIRONMENT}}-sofa --timeout=60s
      echo "Audit logging has been enabled in SOFA"

  setup:
    desc: Complete setup - build, create cluster, load image, and apply manifests
    deps: [ build, load-image, apply-manifests ]
    cmds:
    - |
      # Skip Keycloak connectivity checks during setup for now
      echo "Setup complete!"
      echo "To access the services, run: task port-forward"
      echo ""
      echo "Services will be available at:"
      echo "  - Sofa: http://localhost:{{.SOFA_PORT}}"
      echo "  - Keycloak: http://localhost:{{.KEYCLOAK_PORT}}"
      echo ""
      echo "Keycloak admin console will be available at:"
      echo "  http://localhost:{{.KEYCLOAK_PORT}}/admin"
      echo "  Username: admin"
      echo "  Password: admin"

  default:
    desc: Display help information
    cmds:
    - task --list

  test:auth:unit:
    desc: Run authorization unit tests
    dir: sofa
    cmds:
    - cargo test auth::tests --verbose

  test:auth:integration:
    desc: Run authorization integration tests
    dir: sofa
    cmds:
    - cargo test authorization_integration_tests --verbose

  test:auth:container:
    desc: Test authorization in container
    cmds:
    - |
      echo "Building test container..."
      cd sofa && docker build -t sofa:auth-test .

      echo "Testing unauthorized access..."
      docker run -d --name sofa-auth-test -p 3003:3000 \
        -e ENVIRONMENT=test \
        -e SOFA_AUTH_ENABLED=true \
        -e SOFA_AUTH_AUTHORIZATION="$(cat k8s/overlays/dev/sofa-config-patch.yaml | yq eval '.data.auth_authorization' -)" \
        sofa:auth-test

      sleep 5

      # Test unauthorized access
      response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3003/_all_dbs)
      echo "Response: $response"
      [ "$response" = "401" ] && echo "✓ Unauthorized access blocked" || (echo "✗ Expected 401, got $response" && exit 1)

      # Test invalid token
      response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer invalid" http://localhost:3003/_all_dbs)
      echo "Invalid token response: $response"
      [ "$response" = "401" ] && echo "✓ Invalid token rejected" || (echo "✗ Expected 401, got $response" && exit 1)

      echo "✓ All container tests passed"
      docker stop sofa-auth-test && docker rm sofa-auth-test

  test:auth:cluster:
    desc: Test authorization in cluster
    deps: [ cluster:deploy:dev ]
    cmds:
    - |
      echo "Testing authorization in cluster..."
      kubectl port-forward service/dev-sofa-service 3004:80 &
      FORWARD_PID=$!
      sleep 10

      # Test endpoints
      endpoints=("_all_dbs" "_session" "nonexistent/path")
      for endpoint in "${endpoints[@]}"; do
        echo "Testing /$endpoint..."
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3004/$endpoint)
        [ "$response" = "401" ] && echo "✓ $endpoint blocked" || (echo "✗ $endpoint: expected 401, got $response" && kill $FORWARD_PID && exit 1)
      done

      kill $FORWARD_PID
      echo "✓ All cluster authorization tests passed"

  test:auth:all:
    desc: Run all authorization tests
    cmds:
    - task: test:auth:unit
    - task: test:auth:integration
    - task: test:auth:container
    - task: test:auth:cluster

  test:auth:config:
    desc: Validate authorization configurations
    cmds:
    - |
      echo "Validating authorization configurations..."

      configs=(
        "k8s/overlays/dev/sofa-config-patch.yaml"
        "k8s/overlays/prod/sofa-config-patch.yaml"
        "k8s/base/sofa/sofa-config.yaml"
      )

      for config in "${configs[@]}"; do
        echo "Checking $config..."
        
        # Extract and validate YAML
        yq eval '.data.auth_authorization' "$config" > temp_auth.yaml
        
        # Check required fields
        [ "$(yq eval '.default_action' temp_auth.yaml)" = "deny" ] && echo "✓ default_action: deny" || (echo "✗ Missing default_action: deny" && exit 1)
        [ "$(yq eval '.rules | length' temp_auth.yaml)" -gt 0 ] && echo "✓ Has authorization rules" || (echo "✗ No authorization rules" && exit 1)
        
        rm temp_auth.yaml
      done

      echo "✓ All configurations valid"

  test:auth:security:
    desc: Run security validation checks
    cmds:
    - |
      echo "Running security checks..."

      # Check for secure defaults
      grep -r "default_action: deny" k8s/ || (echo "✗ Found non-deny default actions" && exit 1)
      echo "✓ All configs use deny by default"

      # Check production restrictions
      if grep -A 20 "production-user-access" k8s/overlays/prod/sofa-config-patch.yaml | grep -q "DELETE"; then
        echo "✗ Production allows DELETE operations"
        exit 1
      fi
      echo "✓ Production properly restricts DELETE"

      echo "✓ All security checks passed"

  test:audit:unit:
    desc: Run audit unit tests
    dir: sofa
    cmds:
    - cargo test audit::tests --verbose

  test:audit:integration:
    desc: Run audit integration tests
    dir: sofa
    cmds:
    - cargo test audit_integration_tests --verbose

  test:audit:service:
    desc: Test audit service independently
    dir: audit-service
    cmds:
    - cargo test --verbose
    - cargo build --release

  test:audit:container:
    desc: Test audit logging in containers
    cmds:
    - |
      echo "Building containers..."
      cd sofa && docker build -t sofa:audit-test .
      cd audit-service && docker build -t audit-service:test .

      echo "Testing audit service independently..."
      docker run -d --name audit-test -p 3011:3001 audit-service:test
      sleep 3

      # Test health endpoint
      response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3011/health)
      [ "$response" = "200" ] && echo "✓ Audit service healthy" || (echo "✗ Audit service unhealthy: $response" && exit 1)

      # Test audit endpoint with mock data
      response=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer test-token" \
        -d '{"method":"GET","path":"/test","user_id":"test-user","timestamp":1640995200,"success":true,"status_code":200}' \
        http://localhost:3011/audit)
      [ "$response" = "200" ] && echo "✓ Audit endpoint working" || (echo "✗ Audit endpoint failed: $response" && exit 1)

      echo "Testing sofa with audit enabled..."
      docker run -d --name sofa-audit-test -p 3012:3000 \
        --link audit-test:audit-service \
        -e ENVIRONMENT=test \
        -e SOFA_AUDIT_ENABLED=true \
        -e SOFA_AUDIT_LOG_SERVICE_URL=http://audit-service:3001/audit \
        -e SOFA_AUTH_ENABLED=false \
        sofa:audit-test

      sleep 5

      # Make test requests
      echo "Making test requests..."
      for endpoint in "_all_dbs" "_session" "test/path"; do
        curl -s http://localhost:3012/$endpoint || true
        sleep 1
      done

      # Check logs
      echo "Checking audit service logs..."
      docker logs audit-test 2>&1 | grep -i "audit log" && echo "✓ Audit logs received" || echo "○ No audit logs found"

      echo "Checking sofa logs..."
      docker logs sofa-audit-test 2>&1 | grep -i "audit" && echo "✓ Audit middleware active" || echo "○ No audit middleware logs"

      # Clean up
      docker stop audit-test sofa-audit-test
      docker rm audit-test sofa-audit-test

      echo "✓ All container audit tests passed"

  test:audit:cluster:
    desc: Test audit logging in cluster
    deps: [ cluster:deploy:dev ]
    cmds:
    - |
      echo "Testing audit logging in cluster..."

      # Deploy audit service
      kubectl apply -f k8s/base/audit/audit.yaml
      kubectl wait --for=condition=available --timeout=60s deployment/dev-audit-service

      # Port forward services
      kubectl port-forward service/dev-sofa-service 3013:80 &
      SOFA_PID=$!
      kubectl port-forward service/dev-audit-service 3014:80 &
      AUDIT_PID=$!

      sleep 10

      # Test audit service health
      response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3014/health)
      [ "$response" = "200" ] && echo "✓ Audit service healthy in cluster" || (echo "✗ Audit service unhealthy: $response" && kill $SOFA_PID $AUDIT_PID && exit 1)

      # Make test requests through sofa
      echo "Making test requests through sofa..."
      for i in {1..3}; do
        curl -s http://localhost:3013/_all_dbs || true
        curl -s http://localhost:3013/_session || true
        sleep 2
      done

      # Wait for audit processing
      sleep 5

      # Check logs
      echo "Checking cluster audit logs..."
      kubectl logs -l app=audit-service --tail=10 | grep -i "audit log" && echo "✓ Audit logs in cluster" || echo "○ No audit logs found"
      kubectl logs -l app=sofa --tail=10 | grep -i "audit" && echo "✓ Sofa audit middleware active" || echo "○ No sofa audit logs"

      # Clean up
      kill $SOFA_PID $AUDIT_PID || true

      echo "✓ Cluster audit tests completed"

  test:audit:performance:
    desc: Run audit performance tests
    dir: sofa
    cmds:
    - |
      echo "Running audit performance tests..."

      # Create performance test if it doesn't exist
      if [ ! -f src/audit_bench.rs ]; then
        cat > src/audit_bench.rs << 'EOF'
      use std::time::Instant;
      use crate::audit::*;
      use axum::http::Method;

      pub fn audit_creation_benchmark() {
          let start = Instant::now();
          let iterations = 50000;
          
          for i in 0..iterations {
              let entry = create_audit_entry(
                  &Method::POST,
                  &format!("/database{}/document{}", i % 100, i),
                  Some(format!("user{}", i % 1000)),
                  if i % 10 == 0 { 500 } else { 200 },
                  i % 10 != 0,
              );
              
              // Serialize like in real usage
              let _json = serde_json::to_string(&entry).unwrap();
          }
          
          let duration = start.elapsed();
          let avg_micros = duration.as_micros() / iterations;
          
          println!("Audit Performance Results:");
          println!("  Iterations: {}", iterations);
          println!("  Total time: {:?}", duration);
          println!("  Average per entry: {}μs", avg_micros);
          println!("  Entries per second: {}", 1_000_000 / avg_micros);
          
          // Performance should be under 50μs per entry
          assert!(avg_micros < 50, "Performance too slow: {}μs per entry", avg_micros);
          println!("✓ Performance test passed");
      }
      EOF
        
        # Add to lib.rs if not already there
        grep -q "pub mod audit_bench;" src/lib.rs || echo "pub mod audit_bench;" >> src/lib.rs
      fi

      cargo test audit_bench::audit_creation_benchmark --release -- --nocapture

  test:audit:all:
    desc: Run all audit tests
    cmds:
    - task: test:audit:unit
    - task: test:audit:integration
    - task: test:audit:service
    - task: test:audit:container
    - task: test:audit:cluster
    - task: test:audit:performance

  test:audit:config:
    desc: Validate audit configurations
    cmds:
    - |
      echo "Validating audit configurations..."

      # Check all environment configs
      configs=(
        "k8s/overlays/dev/sofa-config-patch.yaml"
        "k8s/overlays/prod/sofa-config-patch.yaml"
        "k8s/base/sofa/sofa-config.yaml"
        "config/development.yaml"
      )

      for config in "${configs[@]}"; do
        if [ -f "$config" ]; then
          echo "Checking $config..."
          
          # Different checks for different file formats
          if [[ "$config" == *.yaml ]] && [[ "$config" == k8s/* ]]; then
            # Kubernetes ConfigMap format
            if grep -q "audit_enabled.*true" "$config"; then
              echo "✓ $config has audit enabled"
            else
              echo "⚠ $config audit not enabled"
            fi
            
            if grep -q "audit_log_service_url.*http" "$config"; then
              echo "✓ $config has audit service URL"
            else
              echo "✗ $config missing audit service URL"
              exit 1
            fi
          else
            # Regular YAML config format
            if grep -q "enabled.*true" "$config"; then
              echo "✓ $config has audit configuration"
            else
              echo "⚠ $config audit configuration not found"
            fi
          fi
        fi
      done

      echo "✓ All audit configurations validated"

  test:audit:resilience:
    desc: Test audit system resilience
    cmds:
    - |
      echo "Testing audit system resilience..."

      # Test 1: Sofa should work when audit service is unavailable
      echo "Test 1: Audit service unavailable"
      docker run -d --name sofa-resilient -p 3015:3000 \
        -e ENVIRONMENT=test \
        -e SOFA_AUDIT_ENABLED=true \
        -e SOFA_AUDIT_LOG_SERVICE_URL=http://nonexistent:3001/audit \
        -e SOFA_AUTH_ENABLED=false \
        sofa:latest

      sleep 5

      # Should still respond despite audit failures
      response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3015/_all_dbs)
      [ "$response" = "502" ] && echo "✓ Service continues despite audit failures" || echo "○ Unexpected response: $response"

      # Check for audit error logs
      docker logs sofa-resilient 2>&1 | grep -i "failed to send audit" && echo "✓ Audit failures logged" || echo "○ No audit failure logs"

      docker stop sofa-resilient && docker rm sofa-resilient

      echo "✓ Resilience tests completed"

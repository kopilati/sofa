version: '3'

vars:
  CLUSTER_NAME: sofa-test
  IMAGE_NAME: sofa:latest
  NAMESPACE: default
  SOFA_PORT: 30081
  KEYCLOAK_PORT: 30082
  ENVIRONMENT: dev # default environment

tasks:
  build:
    desc: Build the Sofa Docker image
    cmds:
    - echo "Building Sofa Docker image..."
    - docker build -t {{.IMAGE_NAME}} ./sofa

  rollout:
    desc: Build Sofa, load the image into Kind, and rollout the deployment
    cmds:
    - echo "Building and rolling out Sofa..."
    - task: build
    - kind load docker-image {{.IMAGE_NAME}} --name {{.CLUSTER_NAME}}
    - kubectl rollout restart deployment/{{.ENVIRONMENT}}-sofa
    - kubectl wait --for=condition=available deployment/{{.ENVIRONMENT}}-sofa --timeout=60s
    - echo "Sofa has been rebuilt and deployed"

  create-cluster:
    desc: Create a Kind cluster if it doesn't exist
    cmds:
    - |
      if ! kind get clusters | grep -q {{.CLUSTER_NAME}}; then
        echo "Creating Kind cluster..."
        kind create cluster --name {{.CLUSTER_NAME}} --config kind-config.yaml
      else
        echo "Kind cluster already exists, skipping creation."
      fi

  load-image:
    desc: Load the Sofa image into the Kind cluster
    deps: [ build, create-cluster ]
    cmds:
    - echo "Loading Sofa image into Kind cluster..."
    - kind load docker-image {{.IMAGE_NAME}} --name {{.CLUSTER_NAME}}

  apply-manifests:
    desc: Apply all Kubernetes manifests using Kustomize
    deps: [ load-image ]
    cmds:
    - echo "Applying Kubernetes resources using Kustomize for {{.ENVIRONMENT}} environment..."
    - kubectl apply -k k8s/overlays/{{.ENVIRONMENT}}
    - |
      echo "Waiting for services to be ready..."
      kubectl wait --for=condition=available deployment/{{.ENVIRONMENT}}-couchdb --timeout=90s || true
      kubectl wait --for=condition=available deployment/{{.ENVIRONMENT}}-sofa --timeout=90s || true
      kubectl wait --for=condition=available deployment/{{.ENVIRONMENT}}-keycloak --timeout=120s || true

      echo "Services are available in the cluster. Use port-forwarding to access them."
      echo "Run 'task port-forward' to access the services."

  port-forward:
    desc: Set up port forwarding for both Sofa and Keycloak
    cmds:
    - |
      echo "Setting up port forwarding for Sofa and Keycloak..."
      echo "Sofa will be available at: http://localhost:{{.SOFA_PORT}}"
      echo "Keycloak will be available at: http://localhost:{{.KEYCLOAK_PORT}}"
      echo "Keycloak admin console: http://localhost:{{.KEYCLOAK_PORT}}/admin (admin/admin)"
      echo ""
      echo "Press Ctrl+C to stop port forwarding"
      echo ""

      # Start port forwards in background
      kubectl port-forward svc/{{.ENVIRONMENT}}-sofa-service {{.SOFA_PORT}}:80 & 
      SOFA_PF_PID=$!

      kubectl port-forward svc/{{.ENVIRONMENT}}-keycloak-service {{.KEYCLOAK_PORT}}:8080 &
      KC_PF_PID=$!

      # Set up trap to kill background processes on exit
      trap "kill $SOFA_PF_PID $KC_PF_PID" EXIT INT TERM

      # Keep script running
      echo "Port forwarding active. Press Ctrl+C to exit."
      tail -f /dev/null

  port-forward-sofa:
    desc: Set up port forwarding for Sofa only
    cmds:
    - |
      echo "Setting up port forwarding for Sofa..."
      echo "Sofa will be available at: http://localhost:{{.SOFA_PORT}}"
      echo ""
      echo "Press Ctrl+C to stop port forwarding"
      kubectl port-forward svc/{{.ENVIRONMENT}}-sofa-service {{.SOFA_PORT}}:80

  port-forward-keycloak:
    desc: Set up port forwarding for Keycloak only
    cmds:
    - |
      echo "Setting up port forwarding for Keycloak..."
      echo "Keycloak will be available at: http://localhost:{{.KEYCLOAK_PORT}}"
      echo "Keycloak admin console: http://localhost:{{.KEYCLOAK_PORT}}/admin (admin/admin)"
      echo ""
      echo "Press Ctrl+C to stop port forwarding"
      kubectl port-forward svc/{{.ENVIRONMENT}}-keycloak-service {{.KEYCLOAK_PORT}}:8080

  run-test:
    desc: Run the OAuth2 test client directly against the cluster
    deps: [ apply-manifests ]
    cmds:
    - |
      echo "Applying test environment manifests and test client..."
      kubectl apply -k k8s/overlays/test

      echo "Waiting for test job to complete..."
      kubectl wait --for=condition=complete job/test-sofa-test-client --timeout=60s || true

      # Show logs from the test job
      echo "Test job logs:"
      kubectl logs job/test-sofa-test-client

  run-test-local:
    desc: Run the OAuth2 test client locally (requires port-forwarding)
    cmds:
    - |
      export SOFA_URL="http://localhost:{{.SOFA_PORT}}"
      export CLIENT_ID="sofa-client"
      export CLIENT_SECRET="sofa-client-secret"
      cargo run --bin oauth_client

  setup:
    desc: Complete setup - build, create cluster, load image, and apply manifests
    deps: [ load-image, apply-manifests ]
    cmds:
    - |
      echo "Setup complete!"
      echo "To access the services, run: task port-forward"
      echo ""
      echo "Services will be available at:"
      echo "  - Sofa: http://localhost:{{.SOFA_PORT}}"
      echo "  - Keycloak: http://localhost:{{.KEYCLOAK_PORT}}"
      echo ""
      echo "Keycloak admin console will be available at:"
      echo "  http://localhost:{{.KEYCLOAK_PORT}}/admin"
      echo "  Username: admin"
      echo "  Password: admin"

  keycloak-ready:
    desc: Check if Keycloak is ready and properly configured
    deps: [ apply-manifests ]
    cmds:
    - |
      echo "Checking if Keycloak is ready..."
      # Wait for keycloak to be available
      kubectl wait --for=condition=available deployment/{{.ENVIRONMENT}}-keycloak --timeout=120s || true
      echo "To access Keycloak admin console, run: task port-forward-keycloak"
      echo "Then access: http://localhost:{{.KEYCLOAK_PORT}}/admin"
      echo "Username: admin"
      echo "Password: admin"

  switch-env:
    desc: Switch the active environment (dev, test, prod)
    interactive: true
    cmds:
    - |
      if [ -z "{{.CLI_ARGS}}" ]; then
        echo "Usage: task switch-env -- [dev|test|prod]"
        exit 1
      fi

      if [ "{{.CLI_ARGS}}" != "dev" ] && [ "{{.CLI_ARGS}}" != "test" ] && [ "{{.CLI_ARGS}}" != "prod" ]; then
        echo "Invalid environment. Please specify one of: dev, test, prod"
        exit 1
      fi

      # Create a temporary file with updated vars
      cat > .env.temp << EOF
      ENVIRONMENT={{.CLI_ARGS}}
      EOF

      echo "Environment switched to {{.CLI_ARGS}}"

      # Prompt to apply changes immediately
      read -p "Do you want to apply changes immediately? (y/n) " apply
      if [ "$apply" = "y" ] || [ "$apply" = "Y" ]; then
        task apply-manifests ENVIRONMENT={{.CLI_ARGS}}
      fi

  show-env:
    desc: Show the current environment
    cmds:
    - |
      echo "Current environment: {{.ENVIRONMENT}}"

  default:
    desc: Display help information
    cmds:
    - task --list
